# xv6 Exploration & User Program Implementation

## Overview

This project demonstrates creating a **custom user program** in xv6, exploring the **user-kernel interaction**, and understanding how system calls like `printf`, `gets`, and `atoi` work.

The main highlight is a new program called **`myprog.c`**, which:

-   Prints a message `"Hello world from myprog.c"`.
-   Reads a number from the user using `gets()`.
-   Calculates and prints the square of that number.

---

## Files

### 1. User Program (`myprog.c`)

Located in the `user/` directory:

```c
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

#define BUF_SIZE 10

int main() {
    char buf[BUF_SIZE];
    int num;

    printf("Hello world from myprog.c\n");
    printf("Enter a number: ");
    if (gets(buf, BUF_SIZE) <= 0) {
        printf("Error reading input\n");
        exit(1);
    }
    num = atoi(buf);
    printf("%d^2 = %d\n", num, num * num);

    exit(0);
}
```

-   `printf()` → writes output using the write system call.

-   `gets()` → reads input from user using read system call.

-   `atoi()` → converts string input to integer.

---

### 2. `Makefile` Modification

Add the newly added `myprog.c` in the `Makefile`. This ensures your program `_myprog` is compiled and included in `xv6`.

```c
    UPROGS=\
    $U/_cat\
    $U/_echo\
    $U/_forktest\
    $U/_grep\
    $U/_init\
    $U/_kill\
    $U/_ln\
    $U/_ls\
    $U/_mkdir\
    $U/_myprog\      // <--- Added myprog here
    $U/_rm\
    $U/_sh\
    $U/_stressfs\
    $U/_usertests\
    $U/_grind\
    $U/_wc\
    $U/_zombie\
    $U/_logstress\
    $U/_forphan\
    $U/_dorphan
```

---

### Running the Program

1. Open WSL or Ubuntu terminal.

2. Navigate to your xv6 directory( `/xv6-riscv`).

3. make clean & make qemu commands:

    - `make clean` → ensures all previous builds are cleared.

    - `make qemu` → compiles the kernel and launches xv6 in QEMU.

4. Run `myprog.c` program in xv6 shell:

```
    $ myprog
```

5. You should see output similar to:

```
    Hello world from myprog.c
    [enter a number] 5
    5^2 = 25
```

---

---

---

---

---

---

---

---

---

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6). xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Abhinavpatel00, Takahiro Aoyagi, Marcelo Arroyo, Hirbod Behnam, Silas
Boyd-Wickizer, Anton Burtsev, carlclone, Ian Chen, clivezeng, Dan
Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,Wenyang Duan,
echtwerner, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi,
Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam
Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš
Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich,
mes900903, Mark Morrissey, mtasm, Joel Nider, Hayato Ohhashi,
OptimisticSide, papparapa, phosphagos, Harry Porter, Greg Price, Zheng
qhuo, Quancheng, RayAndrew, Jude Rich, segfault, Ayan Shafqat, Eldar
Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire, Taojie, Cam Tenny,
tyfkda, Warren Toomey, Stephen Tu, Alissa Tung, Rafael Ubal, unicornx,
Amane Uehara, Pablo Ventura, Luc Videau, Xi Wang, WaheedHafez, Keiichi
Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653, Andy
Zhang, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu. Once they are installed, and in your shell
search path, you can run "make qemu".
